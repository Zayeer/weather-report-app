{"version":3,"sources":["InputLocation.js","WeatherData.js","DisplayData.js","App.js","index.js"],"names":["Form","styled","form","Input","input","InputForm","props","useState","locationInput","setLocationInput","onSubmit","e","preventDefault","handleSubmit","type","placeholder","value","onChange","target","onBlur","WeatherData","Data","div","Math","random","WeatherImage","img","day","src","image","alt","desc","temp","ResContainer","H4","h4","DataContainer","NotFound","h2","DisplayData","WData","fiveDays","map","index","dayOfWeek","key","locAvail","Fragment","place","weekNum","Main","MainHeading","h1","App","updateResponseArr","updateLocAvail","setPlace","loc","setLoc","updateFiveDays","updateData","resData","filteredData","filter","val","dt_txt","includes","fiveDaysData","forEach","data","push","Date","slice","indexOf","getDay","main","weather","description","icon","filterFiveDaysDisplayData","useEffect","getWeatherData","city","a","url","fetch","response","json","name","list","lat","long","then","catch","err","navigator","geolocation","watchPosition","pos","coords","latitude","longitude","newLoc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec03f085.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Form = styled.form`\r\n  grid-area: b;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 10vh;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-family: \"Lobster Two\", cursive;\r\n  height: 40px;\r\n  border: 3px solid #d49a89;\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &[type=\"text\"] {\r\n    width: 50%;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  &[type=\"submit\"] {\r\n    width: 20%;\r\n  }\r\n  @media (min-width: 768px) {\r\n    &[type=\"text\"] {\r\n      width: 30%;\r\n    }\r\n    &[type=\"submit\"] {\r\n      width: 10%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function InputForm(props) {\r\n  const [locationInput, setLocationInput] = useState(\"\");\r\n\r\n  function handleLocationInput(e) {\r\n    e.preventDefault();\r\n    props.handleSubmit(locationInput);\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={handleLocationInput}>\r\n      <Input\r\n        type=\"text\"\r\n        placeholder=\"Location\"\r\n        value={locationInput}\r\n        onChange={(e) => setLocationInput(e.target.value)}\r\n        onBlur={(e) => setLocationInput(e.target.value)}\r\n      />\r\n      <Input type=\"submit\" value=\"Search\" />\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function WeatherData(props) {\r\n  const Data = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr 2fr 3fr;\r\n    justify-self: center;\r\n    text-align: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: 1px solid #e3dfc8;\r\n    border-radius: 5px;\r\n    padding: 50px;\r\n    background-color: rgb(\r\n      ${Math.random() * 255},\r\n      ${Math.random() * 255},\r\n      ${Math.random() * 255}\r\n    );\r\n    color: #000;\r\n    height: 300px;\r\n    font-size: 1.5em;\r\n    box-shadow: 10px 5px 18px\r\n      rgb(\r\n        ${Math.random() * 255},\r\n        ${Math.random() * 255},\r\n        ${Math.random() * 255}\r\n      );\r\n  `;\r\n\r\n  const WeatherImage = styled.img`\r\n    justify-self: center;\r\n  `;\r\n  return (\r\n    <Data>\r\n      <h3>{props.day}</h3>\r\n      <WeatherImage src={props.image} alt={props.desc} />\r\n      <h1>{props.temp}</h1>\r\n    </Data>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport WeatherData from \"./WeatherData\";\r\n\r\nconst ResContainer = styled.div`\r\n  grid-area: c;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n  height: 80vh;\r\n`;\r\n\r\nconst H4 = styled.h4`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 10vh;\r\n  font-size: 1.2em;\r\n  text-align: center;\r\n  color: #ff7e67;\r\n`;\r\nconst DataContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  @media (min-width: 768px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n  @media (min-width: 992px) {\r\n    grid-template-columns: repeat(5, 1fr);\r\n  }\r\n  grid-gap: 20px;\r\n  height: 70vh;\r\n`;\r\n\r\nconst NotFound = styled.h2`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default function DisplayData(props) {\r\n  const WData = props.fiveDays.map((day, index) => (\r\n    <WeatherData\r\n      day={day.dayOfWeek}\r\n      temp={day.temp}\r\n      key={index}\r\n      image={day.img}\r\n      desc={day.desc}\r\n    />\r\n  ));\r\n  return (\r\n    <ResContainer>\r\n      {props.locAvail ? (\r\n        <React.Fragment>\r\n          {\" \"}\r\n          <H4>{props.place}'s five days weather forecast </H4>\r\n          <DataContainer>{WData}</DataContainer>{\" \"}\r\n        </React.Fragment>\r\n      ) : (\r\n        <NotFound> NOT FOUND </NotFound>\r\n      )}\r\n    </ResContainer>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport InputForm from \"./InputLocation\";\nimport DisplayData from \"./DisplayData\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nfunction day(weekNum) {\n  // eslint-disable-next-line default-case\n  switch (weekNum) {\n    case 0:\n      return \"Sun\";\n    case 1:\n      return \"Mon\";\n    case 2:\n      return \"Tue\";\n    case 3:\n      return \"Wed\";\n    case 4:\n      return \"Thu\";\n    case 5:\n      return \"Fri\";\n    case 6:\n      return \"Sat\";\n  }\n}\nconst Main = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-areas:\n    \"a\"\n    \"b\"\n    \"c\";\n  height: 100vh;\n  width: 100vw;\n  grid-gap: 20px;\n  background-color: #ecf4f3;\n  color: #5b6dcd;\n  font-family: \"Lobster Two\", cursive;\n`;\nconst MainHeading = styled.h1`\n  font-family: \"Alfa Slab One\", cursive;\n  font-size: 1.5em;\n  grid-area: a;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 10vh;\n`;\n\nfunction App() {\n  /*responseArr - holds the entire response data from the request incase\n    if I want to display more data in the future.*/\n  const [responseArr, updateResponseArr] = useState(null);\n  const [locAvail, updateLocAvail] = useState(true); //locAvail - check for location availability.\n  const [place, setPlace] = useState(\"\"); //place - holds the city name from the response data.\n  const [loc, setLoc] = useState(\"\");\n  const [fiveDays, updateFiveDays] = useState(null);\n  useEffect(() => {\n    async function getWeatherData(city) {\n      if (typeof city === \"string\") {\n        const url = `http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=imperial&appid=f481182c63cfe95ca3bec984a6378f17`;\n        const response = await fetch(url);\n        const data = await response.json();\n        setPlace(data.city.name);\n        return data.list;\n      } else {\n        const url = `http://api.openweathermap.org/data/2.5/forecast?lat=${city.lat}&lon=${city.long}&units=imperial&appid=f481182c63cfe95ca3bec984a6378f17`;\n        const response = await fetch(url);\n        const data = await response.json();\n        setPlace(data.city.name);\n        return data.list;\n      }\n    }\n\n    /*if there is no location in the loc variable(which holds the location input provided by user),\n      then display data according to geolocation*/\n    if (!loc) {\n      if (!navigator.geolocation) {\n        err();\n      } else {\n        navigator.geolocation.watchPosition(success, err);\n      }\n      function success(pos) {\n        const coords = pos.coords;\n        getWeatherData({\n          lat: coords.latitude,\n          long: coords.longitude,\n        }).then((data) => {\n          updateLocAvail(true);\n          updateData(data);\n        });\n      }\n\n      function err() {\n        getWeatherData(\"new delhi\").then((data) => {\n          updateLocAvail(true);\n          updateData(data);\n        });\n      }\n    } else {\n      getWeatherData(loc)\n        .then((data) => {\n          updateLocAvail(true);\n          updateData(data);\n        })\n        .catch(() => {\n          updateLocAvail(false);\n        });\n    }\n  }, [loc]);\n\n  function updateData(resData) {\n    updateResponseArr((resData) => resData);\n\n    //filter five days response data according to the desired time\n    const filteredData = resData.filter((val) =>\n      val.dt_txt.includes(\"18:00:00\")\n    );\n\n    updateFiveDays(() => filterFiveDaysDisplayData(filteredData));\n  }\n\n  //return all the five days data each as an object, i.e. five objects inside an array\n  function filterFiveDaysDisplayData(val) {\n    const fiveDaysData = [];\n    val.forEach((data) =>\n      fiveDaysData.push({\n        dayOfWeek: day(\n          new Date(data.dt_txt.slice(0, data.dt_txt.indexOf(\" \"))).getDay()\n        ),\n        temp: data.main.temp,\n        desc: data.weather[0].description,\n        img: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\n      })\n    );\n    return fiveDaysData;\n  }\n\n  function handleInputSubmit(newLoc) {\n    setLoc(newLoc);\n  }\n\n  return (\n    <Main>\n      <MainHeading>WEATHER FORECAST</MainHeading>\n      <InputForm handleSubmit={handleInputSubmit} />\n      {fiveDays && (\n        <DisplayData place={place} fiveDays={fiveDays} locAvail={locAvail} />\n      )}\n    </Main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}